# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _mshr.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mshr', [dirname(__file__)])
        except ImportError:
            import _mshr
            return _mshr
        if fp is not None:
            try:
                _mod = imp.load_module('_mshr', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mshr = swig_import_helper()
    del swig_import_helper
else:
    import _mshr
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def _attach_base_to_numpy_array(obj, owner):
    return _mshr._attach_base_to_numpy_array(obj, owner)
_attach_base_to_numpy_array = _mshr._attach_base_to_numpy_array

_mshr.SHARED_PTR_DISOWN_swigconstant(_mshr)
SHARED_PTR_DISOWN = _mshr.SHARED_PTR_DISOWN
import dolfin
class CSGGeometry(dolfin.Variable):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mshr.delete_CSGGeometry
    Box = _mshr.CSGGeometry_Box
    Sphere = _mshr.CSGGeometry_Sphere
    Cylinder = _mshr.CSGGeometry_Cylinder
    Tetrahedron = _mshr.CSGGeometry_Tetrahedron
    Ellipsoid = _mshr.CSGGeometry_Ellipsoid
    Surface3D = _mshr.CSGGeometry_Surface3D
    Extrude2D = _mshr.CSGGeometry_Extrude2D
    Circle = _mshr.CSGGeometry_Circle
    Ellipse = _mshr.CSGGeometry_Ellipse
    Rectangle = _mshr.CSGGeometry_Rectangle
    Polygon = _mshr.CSGGeometry_Polygon
    Union = _mshr.CSGGeometry_Union
    Intersection = _mshr.CSGGeometry_Intersection
    Difference = _mshr.CSGGeometry_Difference
    Translation = _mshr.CSGGeometry_Translation
    Scaling = _mshr.CSGGeometry_Scaling
    Rotation = _mshr.CSGGeometry_Rotation
    TriPolyhedron = _mshr.CSGGeometry_TriPolyhedron

    def __add__(self, other) :
        if isinstance(other, dolfin.Point) :
            return CSGTranslation(self, other)
        else :
            return CSGUnion(self, other)

    def __mul__(self, other) :
        from numbers import Number
        if isinstance(other, Number) :
            return CSGScaling(self, other)
        else:
            return CSGIntersection(self, other)

    def __sub__(self, other) :
        return CSGDifference(self, other)


CSGGeometry.dim = new_instancemethod(_mshr.CSGGeometry_dim, None, CSGGeometry)
CSGGeometry.set_subdomain = new_instancemethod(_mshr.CSGGeometry_set_subdomain, None, CSGGeometry)
CSGGeometry.has_subdomains = new_instancemethod(_mshr.CSGGeometry_has_subdomains, None, CSGGeometry)
CSGGeometry.get_subdomains = new_instancemethod(_mshr.CSGGeometry_get_subdomains, None, CSGGeometry)
CSGGeometry.is_operator = new_instancemethod(_mshr.CSGGeometry_is_operator, None, CSGGeometry)
CSGGeometry_swigregister = _mshr.CSGGeometry_swigregister
CSGGeometry_swigregister(CSGGeometry)

class CSGPrimitive(CSGGeometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mshr.delete_CSGPrimitive
CSGPrimitive_swigregister = _mshr.CSGPrimitive_swigregister
CSGPrimitive_swigregister(CSGPrimitive)

class CSGOperator(CSGGeometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mshr.delete_CSGOperator
CSGOperator_swigregister = _mshr.CSGOperator_swigregister
CSGOperator_swigregister(CSGOperator)

class CSGUnion(CSGOperator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, g0, g1):
        _mshr.CSGUnion_swiginit(self, _mshr.new_CSGUnion(g0, g1))
    __swig_destroy__ = _mshr.delete_CSGUnion
CSGUnion_swigregister = _mshr.CSGUnion_swigregister
CSGUnion_swigregister(CSGUnion)

class CSGDifference(CSGOperator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, g0, g1):
        _mshr.CSGDifference_swiginit(self, _mshr.new_CSGDifference(g0, g1))
    _g0 = _swig_property(_mshr.CSGDifference__g0_get)
    _g1 = _swig_property(_mshr.CSGDifference__g1_get)
    __swig_destroy__ = _mshr.delete_CSGDifference
CSGDifference_swigregister = _mshr.CSGDifference_swigregister
CSGDifference_swigregister(CSGDifference)

class CSGIntersection(CSGOperator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, g0, g1):
        _mshr.CSGIntersection_swiginit(self, _mshr.new_CSGIntersection(g0, g1))
    _g0 = _swig_property(_mshr.CSGIntersection__g0_get)
    _g1 = _swig_property(_mshr.CSGIntersection__g1_get)
    __swig_destroy__ = _mshr.delete_CSGIntersection
CSGIntersection_swigregister = _mshr.CSGIntersection_swigregister
CSGIntersection_swigregister(CSGIntersection)

class CSGTranslation(CSGOperator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, g, t):
        _mshr.CSGTranslation_swiginit(self, _mshr.new_CSGTranslation(g, t))
    g = _swig_property(_mshr.CSGTranslation_g_get)
    t = _swig_property(_mshr.CSGTranslation_t_get)
    __swig_destroy__ = _mshr.delete_CSGTranslation
CSGTranslation_swigregister = _mshr.CSGTranslation_swigregister
CSGTranslation_swigregister(CSGTranslation)

class CSGScaling(CSGOperator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mshr.CSGScaling_swiginit(self, _mshr.new_CSGScaling(*args))
    g = _swig_property(_mshr.CSGScaling_g_get)
    c = _swig_property(_mshr.CSGScaling_c_get)
    s = _swig_property(_mshr.CSGScaling_s_get)
    translate = _swig_property(_mshr.CSGScaling_translate_get)
    __swig_destroy__ = _mshr.delete_CSGScaling
CSGScaling_swigregister = _mshr.CSGScaling_swigregister
CSGScaling_swigregister(CSGScaling)

class CSGRotation(CSGOperator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mshr.CSGRotation_swiginit(self, _mshr.new_CSGRotation(*args))
    g = _swig_property(_mshr.CSGRotation_g_get)
    rot_axis = _swig_property(_mshr.CSGRotation_rot_axis_get)
    c = _swig_property(_mshr.CSGRotation_c_get)
    theta = _swig_property(_mshr.CSGRotation_theta_get)
    translate = _swig_property(_mshr.CSGRotation_translate_get)
    __swig_destroy__ = _mshr.delete_CSGRotation
CSGRotation_swigregister = _mshr.CSGRotation_swigregister
CSGRotation_swigregister(CSGRotation)

class CSGPrimitive2D(CSGPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mshr.delete_CSGPrimitive2D
CSGPrimitive2D_swigregister = _mshr.CSGPrimitive2D_swigregister
CSGPrimitive2D_swigregister(CSGPrimitive2D)

class Circle(CSGPrimitive2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, c, r, segments=32):
        _mshr.Circle_swiginit(self, _mshr.new_Circle(c, r, segments))
    __swig_destroy__ = _mshr.delete_Circle
Circle.center = new_instancemethod(_mshr.Circle_center, None, Circle)
Circle.radius = new_instancemethod(_mshr.Circle_radius, None, Circle)
Circle.segments = new_instancemethod(_mshr.Circle_segments, None, Circle)
Circle_swigregister = _mshr.Circle_swigregister
Circle_swigregister(Circle)

class Ellipse(CSGPrimitive2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, c, a, b, segments=32):
        _mshr.Ellipse_swiginit(self, _mshr.new_Ellipse(c, a, b, segments))
    __swig_destroy__ = _mshr.delete_Ellipse
Ellipse.center = new_instancemethod(_mshr.Ellipse_center, None, Ellipse)
Ellipse.a = new_instancemethod(_mshr.Ellipse_a, None, Ellipse)
Ellipse.b = new_instancemethod(_mshr.Ellipse_b, None, Ellipse)
Ellipse.segments = new_instancemethod(_mshr.Ellipse_segments, None, Ellipse)
Ellipse_swigregister = _mshr.Ellipse_swigregister
Ellipse_swigregister(Ellipse)

class Rectangle(CSGPrimitive2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, a, b):
        _mshr.Rectangle_swiginit(self, _mshr.new_Rectangle(a, b))
    __swig_destroy__ = _mshr.delete_Rectangle
Rectangle.first_corner = new_instancemethod(_mshr.Rectangle_first_corner, None, Rectangle)
Rectangle.second_corner = new_instancemethod(_mshr.Rectangle_second_corner, None, Rectangle)
Rectangle_swigregister = _mshr.Rectangle_swigregister
Rectangle_swigregister(Rectangle)

class Polygon(CSGPrimitive2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, vertices):
        _mshr.Polygon_swiginit(self, _mshr.new_Polygon(vertices))
    __swig_destroy__ = _mshr.delete_Polygon
Polygon.ccw = new_instancemethod(_mshr.Polygon_ccw, None, Polygon)
Polygon.vertices = new_instancemethod(_mshr.Polygon_vertices, None, Polygon)
Polygon_swigregister = _mshr.Polygon_swigregister
Polygon_swigregister(Polygon)

class CSGPrimitive3D(CSGPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mshr.delete_CSGPrimitive3D
CSGPrimitive3D_swigregister = _mshr.CSGPrimitive3D_swigregister
CSGPrimitive3D_swigregister(CSGPrimitive3D)

class Sphere(CSGPrimitive3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, center, radius, segments=10):
        _mshr.Sphere_swiginit(self, _mshr.new_Sphere(center, radius, segments))
    c = _swig_property(_mshr.Sphere_c_get)
    r = _swig_property(_mshr.Sphere_r_get)
    _segments = _swig_property(_mshr.Sphere__segments_get)
    __swig_destroy__ = _mshr.delete_Sphere
Sphere_swigregister = _mshr.Sphere_swigregister
Sphere_swigregister(Sphere)

class Box(CSGPrimitive3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, a, b):
        _mshr.Box_swiginit(self, _mshr.new_Box(a, b))
    a = _swig_property(_mshr.Box_a_get)
    b = _swig_property(_mshr.Box_b_get)
    __swig_destroy__ = _mshr.delete_Box
Box_swigregister = _mshr.Box_swigregister
Box_swigregister(Box)

class Cylinder(CSGPrimitive3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, top, bottom, top_radius, bottom_radius, segments=32):
        _mshr.Cylinder_swiginit(self, _mshr.new_Cylinder(top, bottom, top_radius, bottom_radius, segments))
    _top = _swig_property(_mshr.Cylinder__top_get)
    _bottom = _swig_property(_mshr.Cylinder__bottom_get)
    _top_radius = _swig_property(_mshr.Cylinder__top_radius_get)
    _bottom_radius = _swig_property(_mshr.Cylinder__bottom_radius_get)
    _segments = _swig_property(_mshr.Cylinder__segments_get)
    __swig_destroy__ = _mshr.delete_Cylinder
Cylinder_swigregister = _mshr.Cylinder_swigregister
Cylinder_swigregister(Cylinder)

class Cone(Cylinder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, top, bottom, r, segments=32):
        _mshr.Cone_swiginit(self, _mshr.new_Cone(top, bottom, r, segments))
    __swig_destroy__ = _mshr.delete_Cone
Cone_swigregister = _mshr.Cone_swigregister
Cone_swigregister(Cone)

class Tetrahedron(CSGPrimitive3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, a, b, c, d):
        _mshr.Tetrahedron_swiginit(self, _mshr.new_Tetrahedron(a, b, c, d))
    a = _swig_property(_mshr.Tetrahedron_a_get)
    b = _swig_property(_mshr.Tetrahedron_b_get)
    c = _swig_property(_mshr.Tetrahedron_c_get)
    d = _swig_property(_mshr.Tetrahedron_d_get)
    __swig_destroy__ = _mshr.delete_Tetrahedron
Tetrahedron_swigregister = _mshr.Tetrahedron_swigregister
Tetrahedron_swigregister(Tetrahedron)

class Surface3D(CSGPrimitive3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mshr.Surface3D_swiginit(self, _mshr.new_Surface3D(*args))
    _filename = _swig_property(_mshr.Surface3D__filename_get)
    mesh = _swig_property(_mshr.Surface3D_mesh_get, _mshr.Surface3D_mesh_set)
    vertex_tolerance = _swig_property(_mshr.Surface3D_vertex_tolerance_get, _mshr.Surface3D_vertex_tolerance_set)
    degenerate_tolerance = _swig_property(_mshr.Surface3D_degenerate_tolerance_get, _mshr.Surface3D_degenerate_tolerance_set)
    repair = _swig_property(_mshr.Surface3D_repair_get, _mshr.Surface3D_repair_set)
    single_connected_component = _swig_property(_mshr.Surface3D_single_connected_component_get, _mshr.Surface3D_single_connected_component_set)
    sharp_features_filter = _swig_property(_mshr.Surface3D_sharp_features_filter_get, _mshr.Surface3D_sharp_features_filter_set)
    first_facet = _swig_property(_mshr.Surface3D_first_facet_get, _mshr.Surface3D_first_facet_set)
    flip_facets = _swig_property(_mshr.Surface3D_flip_facets_get, _mshr.Surface3D_flip_facets_set)
    debug_dump = _swig_property(_mshr.Surface3D_debug_dump_get, _mshr.Surface3D_debug_dump_set)
    cell_domain = _swig_property(_mshr.Surface3D_cell_domain_get, _mshr.Surface3D_cell_domain_set)
    use_cell_domain = _swig_property(_mshr.Surface3D_use_cell_domain_get, _mshr.Surface3D_use_cell_domain_set)
    __swig_destroy__ = _mshr.delete_Surface3D
Surface3D_swigregister = _mshr.Surface3D_swigregister
Surface3D_swigregister(Surface3D)

class Ellipsoid(CSGPrimitive3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, center, a, b, c, segments=17):
        _mshr.Ellipsoid_swiginit(self, _mshr.new_Ellipsoid(center, a, b, c, segments))
    center = _swig_property(_mshr.Ellipsoid_center_get)
    a = _swig_property(_mshr.Ellipsoid_a_get)
    b = _swig_property(_mshr.Ellipsoid_b_get)
    c = _swig_property(_mshr.Ellipsoid_c_get)
    _segments = _swig_property(_mshr.Ellipsoid__segments_get)
    __swig_destroy__ = _mshr.delete_Ellipsoid
Ellipsoid_swigregister = _mshr.Ellipsoid_swigregister
Ellipsoid_swigregister(Ellipsoid)

class Extrude2D(CSGPrimitive3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, arg2, z):
        _mshr.Extrude2D_swiginit(self, _mshr.new_Extrude2D(arg2, z))
    geometry_2d = _swig_property(_mshr.Extrude2D_geometry_2d_get, _mshr.Extrude2D_geometry_2d_set)
    z = _swig_property(_mshr.Extrude2D_z_get)
    __swig_destroy__ = _mshr.delete_Extrude2D
Extrude2D_swigregister = _mshr.Extrude2D_swigregister
Extrude2D_swigregister(Extrude2D)

class CSGCGALDomain2D(dolfin.Variable):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _mshr.delete_CSGCGALDomain2D

    def __init__(self, *args):
        _mshr.CSGCGALDomain2D_swiginit(self, _mshr.new_CSGCGALDomain2D(*args))
    compute_pslg = staticmethod(_mshr.CSGCGALDomain2D_compute_pslg)
CSGCGALDomain2D.join_inplace = new_instancemethod(_mshr.CSGCGALDomain2D_join_inplace, None, CSGCGALDomain2D)
CSGCGALDomain2D.intersect_inplace = new_instancemethod(_mshr.CSGCGALDomain2D_intersect_inplace, None, CSGCGALDomain2D)
CSGCGALDomain2D.difference_inplace = new_instancemethod(_mshr.CSGCGALDomain2D_difference_inplace, None, CSGCGALDomain2D)
CSGCGALDomain2D.point_in_domain = new_instancemethod(_mshr.CSGCGALDomain2D_point_in_domain, None, CSGCGALDomain2D)
CSGCGALDomain2D.compute_boundingcircle_radius = new_instancemethod(_mshr.CSGCGALDomain2D_compute_boundingcircle_radius, None, CSGCGALDomain2D)
CSGCGALDomain2D.num_polygons = new_instancemethod(_mshr.CSGCGALDomain2D_num_polygons, None, CSGCGALDomain2D)
CSGCGALDomain2D.shortest_edge = new_instancemethod(_mshr.CSGCGALDomain2D_shortest_edge, None, CSGCGALDomain2D)
CSGCGALDomain2D.get_outer_polygon = new_instancemethod(_mshr.CSGCGALDomain2D_get_outer_polygon, None, CSGCGALDomain2D)
CSGCGALDomain2D.get_points_in_holes = new_instancemethod(_mshr.CSGCGALDomain2D_get_points_in_holes, None, CSGCGALDomain2D)
CSGCGALDomain2D_swigregister = _mshr.CSGCGALDomain2D_swigregister
CSGCGALDomain2D_swigregister(CSGCGALDomain2D)

def CSGCGALDomain2D_compute_pslg(domains):
    return _mshr.CSGCGALDomain2D_compute_pslg(domains)
CSGCGALDomain2D_compute_pslg = _mshr.CSGCGALDomain2D_compute_pslg

class CSGCGALDomain3DQueryStructure(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _mshr.delete_CSGCGALDomain3DQueryStructure
CSGCGALDomain3DQueryStructure_swigregister = _mshr.CSGCGALDomain3DQueryStructure_swigregister
CSGCGALDomain3DQueryStructure_swigregister(CSGCGALDomain3DQueryStructure)

class CSGCGALDomain3D(CSGPrimitive3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mshr.CSGCGALDomain3D_swiginit(self, _mshr.new_CSGCGALDomain3D(*args))
    __swig_destroy__ = _mshr.delete_CSGCGALDomain3D
    default_parameters = staticmethod(_mshr.CSGCGALDomain3D_default_parameters)
    convex_hull = staticmethod(_mshr.CSGCGALDomain3D_convex_hull)
CSGCGALDomain3D.insert = new_instancemethod(_mshr.CSGCGALDomain3D_insert, None, CSGCGALDomain3D)
CSGCGALDomain3D.num_vertices = new_instancemethod(_mshr.CSGCGALDomain3D_num_vertices, None, CSGCGALDomain3D)
CSGCGALDomain3D.num_facets = new_instancemethod(_mshr.CSGCGALDomain3D_num_facets, None, CSGCGALDomain3D)
CSGCGALDomain3D.num_halfedges = new_instancemethod(_mshr.CSGCGALDomain3D_num_halfedges, None, CSGCGALDomain3D)
CSGCGALDomain3D.volume = new_instancemethod(_mshr.CSGCGALDomain3D_volume, None, CSGCGALDomain3D)
CSGCGALDomain3D.is_insideout = new_instancemethod(_mshr.CSGCGALDomain3D_is_insideout, None, CSGCGALDomain3D)
CSGCGALDomain3D.num_degenerate_facets = new_instancemethod(_mshr.CSGCGALDomain3D_num_degenerate_facets, None, CSGCGALDomain3D)
CSGCGALDomain3D.shortest_edge = new_instancemethod(_mshr.CSGCGALDomain3D_shortest_edge, None, CSGCGALDomain3D)
CSGCGALDomain3D.num_short_edges = new_instancemethod(_mshr.CSGCGALDomain3D_num_short_edges, None, CSGCGALDomain3D)
CSGCGALDomain3D.is_selfintersecting = new_instancemethod(_mshr.CSGCGALDomain3D_is_selfintersecting, None, CSGCGALDomain3D)
CSGCGALDomain3D.remove_selfintersections = new_instancemethod(_mshr.CSGCGALDomain3D_remove_selfintersections, None, CSGCGALDomain3D)
CSGCGALDomain3D.save_off = new_instancemethod(_mshr.CSGCGALDomain3D_save_off, None, CSGCGALDomain3D)
CSGCGALDomain3D.get_points_in_holes = new_instancemethod(_mshr.CSGCGALDomain3D_get_points_in_holes, None, CSGCGALDomain3D)
CSGCGALDomain3D.remove_degenerate_facets = new_instancemethod(_mshr.CSGCGALDomain3D_remove_degenerate_facets, None, CSGCGALDomain3D)
CSGCGALDomain3D.ensure_meshing_preconditions = new_instancemethod(_mshr.CSGCGALDomain3D_ensure_meshing_preconditions, None, CSGCGALDomain3D)
CSGCGALDomain3D.get_query_structure = new_instancemethod(_mshr.CSGCGALDomain3D_get_query_structure, None, CSGCGALDomain3D)
CSGCGALDomain3D.filter_facets = new_instancemethod(_mshr.CSGCGALDomain3D_filter_facets, None, CSGCGALDomain3D)
CSGCGALDomain3D.inside_out = new_instancemethod(_mshr.CSGCGALDomain3D_inside_out, None, CSGCGALDomain3D)
CSGCGALDomain3D.num_holes = new_instancemethod(_mshr.CSGCGALDomain3D_num_holes, None, CSGCGALDomain3D)
CSGCGALDomain3D.num_disconnected_components = new_instancemethod(_mshr.CSGCGALDomain3D_num_disconnected_components, None, CSGCGALDomain3D)
CSGCGALDomain3D.keep_largest_components = new_instancemethod(_mshr.CSGCGALDomain3D_keep_largest_components, None, CSGCGALDomain3D)
CSGCGALDomain3D.get_aabb = new_instancemethod(_mshr.CSGCGALDomain3D_get_aabb, None, CSGCGALDomain3D)
CSGCGALDomain3D.close_holes = new_instancemethod(_mshr.CSGCGALDomain3D_close_holes, None, CSGCGALDomain3D)
CSGCGALDomain3D.close_hole = new_instancemethod(_mshr.CSGCGALDomain3D_close_hole, None, CSGCGALDomain3D)
CSGCGALDomain3D.sharpest_edge = new_instancemethod(_mshr.CSGCGALDomain3D_sharpest_edge, None, CSGCGALDomain3D)
CSGCGALDomain3D.num_sharp_edges = new_instancemethod(_mshr.CSGCGALDomain3D_num_sharp_edges, None, CSGCGALDomain3D)
CSGCGALDomain3D.smooth_taubin = new_instancemethod(_mshr.CSGCGALDomain3D_smooth_taubin, None, CSGCGALDomain3D)
CSGCGALDomain3D.smooth_laplacian = new_instancemethod(_mshr.CSGCGALDomain3D_smooth_laplacian, None, CSGCGALDomain3D)
CSGCGALDomain3D.refine_center_vertex = new_instancemethod(_mshr.CSGCGALDomain3D_refine_center_vertex, None, CSGCGALDomain3D)
CSGCGALDomain3D.refine_edge_split = new_instancemethod(_mshr.CSGCGALDomain3D_refine_edge_split, None, CSGCGALDomain3D)
CSGCGALDomain3D.reconstruct_surface = new_instancemethod(_mshr.CSGCGALDomain3D_reconstruct_surface, None, CSGCGALDomain3D)
CSGCGALDomain3D.get_vertices = new_instancemethod(_mshr.CSGCGALDomain3D_get_vertices, None, CSGCGALDomain3D)
CSGCGALDomain3D.get_facets = new_instancemethod(_mshr.CSGCGALDomain3D_get_facets, None, CSGCGALDomain3D)
CSGCGALDomain3D_swigregister = _mshr.CSGCGALDomain3D_swigregister
CSGCGALDomain3D_swigregister(CSGCGALDomain3D)

def CSGCGALDomain3D_default_parameters():
    return _mshr.CSGCGALDomain3D_default_parameters()
CSGCGALDomain3D_default_parameters = _mshr.CSGCGALDomain3D_default_parameters

def CSGCGALDomain3D_convex_hull(*args):
    return _mshr.CSGCGALDomain3D_convex_hull(*args)
CSGCGALDomain3D_convex_hull = _mshr.CSGCGALDomain3D_convex_hull


def generate_mesh(*args):
    return _mshr.generate_mesh(*args)
generate_mesh = _mshr.generate_mesh
class CSGCGALMeshGenerator2D(dolfin.Variable):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mshr.CSGCGALMeshGenerator2D_swiginit(self, _mshr.new_CSGCGALMeshGenerator2D())
    __swig_destroy__ = _mshr.delete_CSGCGALMeshGenerator2D
    default_parameters = staticmethod(_mshr.CSGCGALMeshGenerator2D_default_parameters)
CSGCGALMeshGenerator2D.generate = new_instancemethod(_mshr.CSGCGALMeshGenerator2D_generate, None, CSGCGALMeshGenerator2D)
CSGCGALMeshGenerator2D_swigregister = _mshr.CSGCGALMeshGenerator2D_swigregister
CSGCGALMeshGenerator2D_swigregister(CSGCGALMeshGenerator2D)

def CSGCGALMeshGenerator2D_default_parameters():
    return _mshr.CSGCGALMeshGenerator2D_default_parameters()
CSGCGALMeshGenerator2D_default_parameters = _mshr.CSGCGALMeshGenerator2D_default_parameters

class CSGCGALMeshGenerator3D(dolfin.Variable):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mshr.CSGCGALMeshGenerator3D_swiginit(self, _mshr.new_CSGCGALMeshGenerator3D())
    __swig_destroy__ = _mshr.delete_CSGCGALMeshGenerator3D
    default_parameters = staticmethod(_mshr.CSGCGALMeshGenerator3D_default_parameters)
CSGCGALMeshGenerator3D.generate = new_instancemethod(_mshr.CSGCGALMeshGenerator3D_generate, None, CSGCGALMeshGenerator3D)
CSGCGALMeshGenerator3D_swigregister = _mshr.CSGCGALMeshGenerator3D_swigregister
CSGCGALMeshGenerator3D_swigregister(CSGCGALMeshGenerator3D)

def CSGCGALMeshGenerator3D_default_parameters():
    return _mshr.CSGCGALMeshGenerator3D_default_parameters()
CSGCGALMeshGenerator3D_default_parameters = _mshr.CSGCGALMeshGenerator3D_default_parameters

class TetgenMeshGenerator3D(dolfin.Variable):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mshr.TetgenMeshGenerator3D_swiginit(self, _mshr.new_TetgenMeshGenerator3D())
    __swig_destroy__ = _mshr.delete_TetgenMeshGenerator3D
    default_parameters = staticmethod(_mshr.TetgenMeshGenerator3D_default_parameters)
TetgenMeshGenerator3D.generate = new_instancemethod(_mshr.TetgenMeshGenerator3D_generate, None, TetgenMeshGenerator3D)
TetgenMeshGenerator3D_swigregister = _mshr.TetgenMeshGenerator3D_swigregister
TetgenMeshGenerator3D_swigregister(TetgenMeshGenerator3D)

def TetgenMeshGenerator3D_default_parameters():
    return _mshr.TetgenMeshGenerator3D_default_parameters()
TetgenMeshGenerator3D_default_parameters = _mshr.TetgenMeshGenerator3D_default_parameters

class CSGGeometries(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    lego = staticmethod(_mshr.CSGGeometries_lego)
    propeller = staticmethod(_mshr.CSGGeometries_propeller)

    def __init__(self):
        _mshr.CSGGeometries_swiginit(self, _mshr.new_CSGGeometries())
    __swig_destroy__ = _mshr.delete_CSGGeometries
CSGGeometries_swigregister = _mshr.CSGGeometries_swigregister
CSGGeometries_swigregister(CSGGeometries)

def CSGGeometries_lego(*args):
    return _mshr.CSGGeometries_lego(*args)
CSGGeometries_lego = _mshr.CSGGeometries_lego

def CSGGeometries_propeller(r=0.125, R=0.5, w=0.3, h=0.025, rotate_blades=True, include_tip=False):
    return _mshr.CSGGeometries_propeller(r, R, w, h, rotate_blades, include_tip)
CSGGeometries_propeller = _mshr.CSGGeometries_propeller

class DolfinMeshUtils(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    cell_volume_min_max = staticmethod(_mshr.DolfinMeshUtils_cell_volume_min_max)
    has_isolated_vertices = staticmethod(_mshr.DolfinMeshUtils_has_isolated_vertices)
    check_mesh = staticmethod(_mshr.DolfinMeshUtils_check_mesh)
    extract_subdomain = staticmethod(_mshr.DolfinMeshUtils_extract_subdomain)
    merge_meshes = staticmethod(_mshr.DolfinMeshUtils_merge_meshes)

    def __init__(self):
        _mshr.DolfinMeshUtils_swiginit(self, _mshr.new_DolfinMeshUtils())
    __swig_destroy__ = _mshr.delete_DolfinMeshUtils
DolfinMeshUtils_swigregister = _mshr.DolfinMeshUtils_swigregister
DolfinMeshUtils_swigregister(DolfinMeshUtils)

def DolfinMeshUtils_cell_volume_min_max(m):
    return _mshr.DolfinMeshUtils_cell_volume_min_max(m)
DolfinMeshUtils_cell_volume_min_max = _mshr.DolfinMeshUtils_cell_volume_min_max

def DolfinMeshUtils_has_isolated_vertices(m):
    return _mshr.DolfinMeshUtils_has_isolated_vertices(m)
DolfinMeshUtils_has_isolated_vertices = _mshr.DolfinMeshUtils_has_isolated_vertices

def DolfinMeshUtils_check_mesh(m):
    return _mshr.DolfinMeshUtils_check_mesh(m)
DolfinMeshUtils_check_mesh = _mshr.DolfinMeshUtils_check_mesh

def DolfinMeshUtils_extract_subdomain(arg2, cell_domain):
    return _mshr.DolfinMeshUtils_extract_subdomain(arg2, cell_domain)
DolfinMeshUtils_extract_subdomain = _mshr.DolfinMeshUtils_extract_subdomain

def DolfinMeshUtils_merge_meshes(m1, m2):
    return _mshr.DolfinMeshUtils_merge_meshes(m1, m2)
DolfinMeshUtils_merge_meshes = _mshr.DolfinMeshUtils_merge_meshes

class UnitSphereMesh(dolfin.Mesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, resolution):
        _mshr.UnitSphereMesh_swiginit(self, _mshr.new_UnitSphereMesh(resolution))
    __swig_destroy__ = _mshr.delete_UnitSphereMesh
UnitSphereMesh_swigregister = _mshr.UnitSphereMesh_swigregister
UnitSphereMesh_swigregister(UnitSphereMesh)



